<?php
/**
 * Created by PhpStorm.
 * User: andrey
 * Date: 19.04.16
 * Time: 10:54
 */

namespace msdie\modules\comments\models;


use yii\base\Model;
use yii\db\ActiveRecord;
use yii\web\Response;
use yii\widgets\ActiveForm;

class CommentForm extends Comments
{
    public $url;
    public $link_params;
    public $fields=[];
    public $fields_names=[];
    private $_rules=null;

    public function __construct(array $config=[])
    {
        parent::__construct($config);

        if(isset($config['fields'])==false) {
            $this->fields = \yii\helpers\ArrayHelper::index(\Yii::$app->getModule('comments')->fields,'name');
        }

        $this->fields_names = \yii\helpers\ArrayHelper::getColumn($this->fields,'name');

    }


    public function attributes()
    {
        return array_merge(parent::attributes(),\yii\helpers\ArrayHelper::getColumn($this->fields,'name'));
    }

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub
        if($this->commentsFields!=null)
        {
            foreach($this->commentsFields as $field)
            {
                $name = $field->field_name;
                $this->$name = $field->value;
            }
        }
    }

    public function attributeLabels()
    {
        return array_merge(parent::attributeLabels(),\yii\helpers\ArrayHelper::map($this->fields,'name','label')); // TODO: Change the autogenerated stub
    }

    public function rules()
    {
        if($this->_rules == null) {
            $this->_rules=[];
            foreach ($this->fields as $field) {
                if (is_array($field['rules']))
                {
                    foreach($field['rules'] as $rule)
                    {
                        if(is_array($rule))
                            $this->_rules[]=array_merge([$field['name']],$rule);
                        else
                        $this->_rules[]=[$field['name'],$rule];

                    }
                }
                else {
                    $this->_rules[]=array_merge([$field['name']],$field['rules']);
                }
            }
            $this->_rules = array_merge(parent::rules(),$this->_rules);
        }

        return $this->_rules;
    }
    
    public function save($runValidation = true, $attributeNames = null)
    {
        $isNewRecord = $this->isNewRecord;
        $transaction = \Yii::$app->db->beginTransaction();

        if(!parent::save($runValidation, parent::attributes()))
        {
            $transaction->rollback();
            return false;
        }



        if($isNewRecord) {
            $commentLink = new CommentsLink();
            $commentLink->comments_id = $this->id;
            $commentLink->url = $this->url;
            $commentLink->link_params = $this->link_params;
            $commentLink->user_id = !\Yii::$app->user->isGuest?\Yii::$app->user->id:null;
            if(!$commentLink->save()) {
                $transaction->rollback();
                return false;
            }

        }
        else {
            CommentsFields::deleteAll(['comments_id' => $this->id]);
        }


        foreach($this->fields as $field)
        {
            $name = $field['name'];
            if($this->$name!=null) {
                $model = new CommentsFields();

                $model->comments_id = $this->id;
                $model->field_name = $field['name'];
                $model->value = $this->$name;

                if (!($st=$model->save($runValidation = true))) {
                    $transaction->rollback();
                    return false;
                }
            }
        }


        $transaction->commit();
        return true;
    }


    public function ajaxValidation()
    {
        \Yii::$app->response->format = Response::FORMAT_JSON;
        echo json_encode(ActiveForm::validate($this));
        \Yii::$app->end();
    }

}